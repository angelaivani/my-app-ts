{"version":3,"sources":["telemetry-log.js","telemetry-tracer.ts","pages/Landing/Landing.tsx","pages/AddProduct/AddProduct.tsx","pages/ProductList/ProductList.tsx","ErrorBoundary.js","pages/BuggyPage/BuggyPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["opentelemetry","require","winston","UINT_MAX","toNumberString","buffer","radix","high","readInt32","low","str","mod","Math","floor","toString","fromString","raddix","Uint8Array","len","length","pos","sign","chr","parseInt","writeUInt32BE","value","offset","module","exports","createLogger","transports","Console","format","combine","info","span","trace","getSpan","context","active","traceIdEnd","traceId","slice","spanId","json","provider","WebTracerProvider","addSpanProcessor","SimpleSpanProcessor","ConsoleSpanExporter","register","contextManager","ZoneContextManager","registerInstrumentations","instrumentations","DocumentLoadInstrumentation","Landing","AddProduct","useState","name","isSelected","listCars","setListCars","handleChangeCheckbox","e","target","checked","index","findIndex","item","newList","map","FormGroup","carItem","FormControlLabel","control","Checkbox","onChange","label","warehouseList","id","ProductList","navigate","useNavigate","warehouseId","productSku","filterForm","users","setUsers","getData","axios","get","response","responseUsers","data","responseUser","fetchFakeError","logger","console","log","errResponse","datadogLogs","error","url","config","method","Box","sx","display","justifyContent","Button","onClick","alignItems","width","FormControl","fullWidth","InputLabel","Select","labelId","event","MenuItem","ErrorComponent","ErrorBoundary","state","hasError","message","stack","errorInfo","componentStack","errorInformation","errorSource","this","setState","children","props","React","Component","getDerivedStateFromError","BuggyPage","counter","setCounter","Error","prev","App","className","to","style","marginRight","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","handlers","rest","req","res","ctx","status","userId","title","completed","setupWorker","root","ReactDOM","createRoot","document","getElementById","init","clientToken","service","site","forwardErrorsToLogs","sampleRate","render","StrictMode"],"mappings":"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","file":"static/js/main.39ce29a7.chunk.js","sourcesContent":["const opentelemetry = require('@opentelemetry/api');\nconst winston = require('winston')\nconst UINT_MAX = 4294967296\n\n// Convert a buffer to a numerical string.\nfunction toNumberString (buffer, radix) {\n  let high = readInt32(buffer, 0)\n  let low = readInt32(buffer, 4)\n  let str = ''\n\n  radix = radix || 10\n\n  while (1) {\n    const mod = (high % radix) * UINT_MAX + low\n\n    high = Math.floor(high / radix)\n    low = Math.floor(mod / radix)\n    str = (mod % radix).toString(radix) + str\n\n    if (!high && !low) break\n  }\n\n  return str\n}\n\n// Convert a numerical string to a buffer using the specified radix.\nfunction fromString (str, raddix) {\n  const buffer = new Uint8Array(8)\n  const len = str.length\n\n  let pos = 0\n  let high = 0\n  let low = 0\n\n  if (str[0] === '-') pos++\n\n  const sign = pos\n\n  while (pos < len) {\n    const chr = parseInt(str[pos++], raddix)\n\n    if (!(chr >= 0)) break // NaN\n\n    low = low * raddix + chr\n    high = high * raddix + Math.floor(low / UINT_MAX)\n    low %= UINT_MAX\n  }\n\n  if (sign) {\n    high = ~high\n\n    if (low) {\n      low = UINT_MAX - low\n    } else {\n      high++\n    }\n  }\n\n  writeUInt32BE(buffer, high, 0)\n  writeUInt32BE(buffer, low, 4)\n\n  return buffer\n}\n\n// Write unsigned integer bytes to a buffer.\nfunction writeUInt32BE (buffer, value, offset) {\n  buffer[3 + offset] = value & 255\n  value = value >> 8\n  buffer[2 + offset] = value & 255\n  value = value >> 8\n  buffer[1 + offset] = value & 255\n  value = value >> 8\n  buffer[0 + offset] = value & 255\n}\n\n// Read a buffer to unsigned integer bytes.\nfunction readInt32 (buffer, offset) {\n  return (buffer[offset + 0] * 16777216) +\n    (buffer[offset + 1] << 16) +\n    (buffer[offset + 2] << 8) +\n    buffer[offset + 3]\n}\n\nconst tracingFormat = function () {\n  return winston.format(info => {\n    const span = opentelemetry.trace.getSpan(opentelemetry.context.active());\n    if (span) {\n      const context = span.context();\n      const traceIdEnd = context.traceId.slice(context.traceId.length / 2)\n      info['dd.trace_id'] = toNumberString(fromString(traceIdEnd,16))\n      info['dd.span_id'] = toNumberString(fromString(context.spanId,16))\n    }\n    return info;\n  })();\n}\n\nmodule.exports = winston.createLogger({\n  transports: [new winston.transports.Console],\n  format: winston.format.combine(tracingFormat(), winston.format.json())\n});\n\n \n\n","import { ConsoleSpanExporter, SimpleSpanProcessor } from '@opentelemetry/sdk-trace-base';\nimport { WebTracerProvider } from '@opentelemetry/sdk-trace-web';\nimport { DocumentLoadInstrumentation } from '@opentelemetry/instrumentation-document-load';\nimport { ZoneContextManager } from '@opentelemetry/context-zone';\nimport { registerInstrumentations } from '@opentelemetry/instrumentation';\n\nconst provider = new WebTracerProvider();\nprovider.addSpanProcessor(new SimpleSpanProcessor(new ConsoleSpanExporter()));\n\nprovider.register({\n  // Changing default contextManager to use ZoneContextManager - supports asynchronous operations - optional\n  contextManager: new ZoneContextManager(),\n});\n\n// Registering instrumentations\nregisterInstrumentations({\n  instrumentations: [\n    new DocumentLoadInstrumentation(),\n  ],\n});\n","const Landing = () => (\n  <h1>Hi Landing</h1>\n)\nexport default Landing","import { useState } from 'react' \nimport { FormGroup, FormControlLabel, Checkbox, CheckboxProps } from '@mui/material' \n\nconst AddProduct = () => {\n  const [listCars, setListCars] = useState([\n    {\n      name: 'Avanza',\n      isSelected: false\n    },\n    {\n      name: 'Toyota',\n      isSelected: false\n    }\n  ])\n  \n  const handleChangeCheckbox: CheckboxProps['onChange'] = (e) => {\n    const { name, checked } = e.target\n    const index = listCars.findIndex(item => item.name === name)\n\n    const newList = listCars.map(item => ({...item}))\n    newList[index].isSelected = checked\n    setListCars(newList)    \n  }\n\n  return (\n    <div>\n      <h1>Add Product Page</h1>    \n    <FormGroup>\n      {listCars.map(carItem => (\n        <FormControlLabel key={carItem.name} control={<Checkbox name={carItem.name} checked={carItem.isSelected} onChange={handleChangeCheckbox} /> } label={carItem.name} />\n      ))}        \n    </FormGroup>        \n    </div>\n  )\n}\nexport default AddProduct","import { useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport { Box, Button, FormControl, InputLabel, Select, SelectProps, MenuItem } from '@mui/material'\nimport axios, { AxiosError } from 'axios'\nimport { datadogLogs } from '@datadog/browser-logs'\nimport * as logger from '../../telemetry-log' \n\ntype UserStateType = {\n  id: string\n  name: string\n}\n\ntype FilterFormStateType = {\n  warehouseId: number\n  productSku: string\n}\n\nconst warehouseList = [\n  {\n    id: 1,\n    name: 'Kosambi'\n  },\n  {\n    id: 2,\n    name: 'Pegangsaan'\n  },\n  {\n    id: 3,\n    name: 'Jatim'\n  }\n]\nconst ProductList = () => {\n  const navigate = useNavigate()\n  const [filterForm, setFilterForm] = useState<FilterFormStateType>({\n    warehouseId: 0,\n    productSku: ''\n  })\n\n  const [users, setUsers] = useState<UserStateType[]>([])    \n\n  const getData = async() => {\n    const response = await axios.get('https://jsonplaceholder.typicode.com/users')\n    let responseUsers: UserStateType[] = response.data.map((responseUser: any) => {\n      return {\n        id: responseUser.id,\n        name: responseUser.name\n      }\n    })    \n    setUsers(responseUsers)\n  }\n\n  const handleRedirectToAddProduct = () => {\n    navigate('/product/add')\n  }\n\n  const handleChangeWarehouse: SelectProps['onChange'] = (event) => {    \n    console.log('SELECTED', event.target)\n  }\n\n  const fetchFakeError = async() => {\n    try {\n      logger.info(\"Fetch fake error\")\n      const response = await axios.get('https://mock.codes/400')\n      console.log('RESPONSE', response)\n    }\n    catch(err) {\n      const errResponse = err as AxiosError\n      datadogLogs.logger.error('API CALL ERROR', {      \n        url: errResponse?.config?.url, method: errResponse?.config?.method\n      })      \n    }\n  }\n\n  return (\n    <>\n    <Box sx={{ display: 'flex', justifyContent: 'flex-end'}}>\n      <Button onClick={handleRedirectToAddProduct}>Add Product</Button>\n    </Box>\n    \n    <Box sx={{ display: 'flex', alignItems: 'center', width: '20%'}}>\n      <FormControl fullWidth>\n        <InputLabel id=\"demo-simple-select-label\">Gudang</InputLabel>\n        <Select\n          labelId=\"demo-simple-select-label\"\n          id=\"demo-simple-select\"\n          name=\"warehouseId\"\n          value={filterForm.warehouseId}\n          label=\"Gudang\"\n          onChange={handleChangeWarehouse}\n        > \n        {warehouseList.map((item) => (\n          <MenuItem key={item.id} value={item.id}>{item.name}</MenuItem>\n        ))}                       \n        </Select>\n      </FormControl>\n      \n    </Box>\n\n    <button onClick={() => getData()}>FETCH DATA</button>\n    <button onClick={() => fetchFakeError()}>Simulate fake error</button>\n    <ul >\n      {users.map(item => (\n        <li key={item.id} data-testid=\"results\">{item.id} - {item.name}</li>\n      ))}\n    </ul>\n    </>        \n  )\n}\nexport default ProductList","import React from 'react'\nimport { datadogLogs } from '@datadog/browser-logs'\n\nconst ErrorComponent = () => <h1>ada error nie</h1>\n\nclass ErrorBoundary extends React.Component {\n  state = {\n    hasError: false,\n    error: { message: '', stack: '' },\n    errorInfo: { componentStack: '' },\n  }\n\n  static getDerivedStateFromError = (error) => {    \n    return { hasError: true }\n  }\n\n  componentDidCatch(error, errorInfo) {    \n    datadogLogs.logger.error('ERROR BOUNDARY in my-ts-app repo', {      \n      errorInformation: errorInfo.componentStack,\n      errorSource: 'ERROR BOUNDARY',\n    })\n\n    this.setState({ error, errorInfo })\n  }\n\n  render() {\n    const { hasError } = this.state\n    const { children } = this.props\n    if(hasError) {      \n      return <ErrorComponent />\n    }\n    return children    \n  }\n}\nexport default ErrorBoundary\n","import { useState } from 'react'\nimport { datadogLogs } from '@datadog/browser-logs'\nimport { Button } from '@mui/material'\nimport ErrorBoundary from '../../ErrorBoundary'\nimport * as logger from '../../telemetry-log' \n\n\nconst BuggyPage = () => {\n  logger.info(\"Example log line with trace correlation info\")\n  const [counter, setCounter] = useState(0)\n\n  const handleAddCounter = () => {\n    datadogLogs.logger.info('click counter in my-ts-app repo', { counter: counter+1})\n    logger.info(\"Example log line with trace correlation info\")\n    setCounter(prev => prev + 1)\n  }\n\n  if(counter === 5) {    \n    throw new Error('error')\n  }\n\n  return (\n    <ErrorBoundary>\n      <Button onClick={handleAddCounter}>Add counter</Button>\n      <p>Current counter {counter}</p>\n      <p>when counter reach 5, error will be thrown</p>\n    </ErrorBoundary>    \n  )\n}\nexport default BuggyPage","import { BrowserRouter, Routes, Route } from 'react-router-dom'\nimport { Link } from \"react-router-dom\";\n\nimport Landing from './pages/Landing'\nimport AddProduct from './pages/AddProduct'\nimport ProductList from './pages/ProductList'\nimport BuggyPage from './pages/BuggyPage'\nimport './App.css';\n\nfunction App() {\n  \n\n\n  return (\n    <div className=\"App\">              \n        <BrowserRouter>\n        <Link to=\"/\" style={{ marginRight: '15px' }}>Landing Page</Link>\n        <Link to=\"/product/list\" style={{ marginRight: '15px' }}>Product List</Link>\n        <Link to=\"/product/add\" style={{ marginRight: '15px' }}>Product Add</Link>\n        <Link to=\"/buggy-page\" style={{ marginRight: '15px' }}>Buggy Page</Link>\n        <br />\n\n        <Routes>\n          <Route path=\"/\" element={<Landing />} />\n          <Route path=\"/product/add\" element={<AddProduct />} />\n          <Route path=\"/product/list\" element={<ProductList />} />          \n          <Route path=\"/buggy-page\" element={<BuggyPage />} />\n        \n          \n        </Routes>\n        </BrowserRouter>      \n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './telemetry-tracer'\nimport { datadogLogs } from '@datadog/browser-logs'\n// import { datadogRum } from '@datadog/browser-rum'\n// import './tracer'\n\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { rest, setupWorker } from 'msw'\n\nconst handlers = [\n  rest.get(\"https://jsonplaceholder.typicode.com/todos\", (req, res, ctx) => {\n    return res(\n      ctx.status(200),\n      ctx.json({\n        data: [\n          {\n            userId: 1,\n            id: 1,\n            title: 'todo-test-1',\n            completed: false\n          },\n          {\n            userId: 2,\n            id: 2,\n            title: 'todo-test-2 ',\n            completed: true\n          }\n        ]\n      })\n    );    \n  }),\n]\n\nconst worker = setupWorker(...handlers)\n\nif (process.env.NODE_ENV === 'development') {\n  worker.start()\n}\n\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\n\ndatadogLogs.init({\n  clientToken: 'pub2adfd6205348b86b3750b371febecb9d',\n  service: 'my-ts-app',\n  site: 'us5.datadoghq.com',\n  forwardErrorsToLogs: true,\n  sampleRate: 100,\n})\n\n// datadogRum.init({\n//     applicationId: 'f751ab6b-15c7-49fe-bb07-e24f95b86614',\n//     clientToken: 'pub2adfd6205348b86b3750b371febecb9d',\n//     site: 'us5.datadoghq.com',\n//     service:'my-ts-app',\n//     env:'my-ts-app-dev',    \n//     version: '1.0.0',\n//     sampleRate: 100,\n//     premiumSampleRate: 100,\n//     trackInteractions: true,\n//     defaultPrivacyLevel:'mask-user-input',\n//     sessionReplaySampleRate: 0,\n//     allowedTracingOrigins: [\"https://angelaivani.github.io/my-app-ts/\", (origin) => { console.log('ORIGIN', origin); return origin === \"https://angelaivani.github.io/my-app-ts\" || origin === \"https://angelaivani.github.io\" || origin === \"http://localhost:3000\"}]\n// });\n    \n\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}